Terraform Notes

Infrastructure as Code (IAC) types:
1. Configuration managment:
- Ansible, Puppet, Saltstack
- Designed to install and manage Software
- Mainstains standard structure
- Version control
- Idempotent - run a code multiplate times and will only make changes to defined state
2. Server Templating
- Docker, Packer, Vagrant
- Pre Installed Software and Dependencies
- Virtual Machine or Docker Images
- Immutable Infrastructure
3. Provisioning Tools:
- Terraform, CloudFormation
- Deploy Immutable Infrastructure Resources
- Srevers, Databases, Network Components etc.
- Multiple Providers

Terraform uses HashiCorp Configuration Language (HCL) - Declarative Language
and in .tf file extention
- Declarative
- Resource - a file that terraform manages
- A state is a blueprint for Infrastructure

Instalation:
- single binary
wget https://releases.hashicorp.com/terraform/0.13.0/terraform_0.13.0_linux_amd64.zip
uznip terraform_0.13.0_linux_amd64.zip
mv terraform /usr/local/bin
terraform version
- single file

=================================
HCL Basics: (added file main.tf) 

<block> <parameters> {
    key1 = value1
    key2 = value2
}

<block> - contains a set of arguments in a key value file format

Writing terraform workflow consists of four steps:
1. Write the configuration file
2. Run the terraform init command
3. Review the extention plan using the terraform plan command 
(+ symbols mean this will be created)
4. Apply changes with terraform apply command
Running cat command will see if the file was created
Running terraform show command will show us the congiguration

terraform destroy - shows execution plan and destroys while confirmed

=====================
Terraform Providers:

terraform innit - terraform downloads and installs plugins for Provider

  File Name    |                       Purpose
main.tf        | Main configuration file contatining resource definition
varaibles.tf   | Contains variable declaration
outputs.tf     | Contains outputs from Resources
provider.tf    | Contains provider definition


INPUT VARIABLES
Created file variables.tf to support main.tf
Notes on variables in that file with examples

If we do not provide a default version while using variables:
1. and we run terraform apply command, we will be asked to enter a value
or we can run: terraform apply -var "filename="~/pets.txt" -var "content=We love Pets!" etc.
2. We can also run:
export TF_VAR_filename="~/pets.txt"
export TF_VAR_content="We love Pets!" (etc)
terraform apply
3. we can create terraform.tfvars files where the content would look like this:
filename = "~/pets.txt"
content = "We love Pets!"
and then run terraform apply command
!!!!This file can be called:
name.tfvars | name.tfvars.json | file.auto.tfvars | name.auto.tfvars.json
terraform apply -var-file name.tfvars

The order of usage if multiple sources: (from first to last)
export TF_VAR_filename=...
terraform.tfvars
variable.auto.tfvars
terraform apply -var "filename=..."

OUPUT VARIABLES
output "<variable-name>" {
    value = "<variable_value>"
    <arguments>
}
terraform output - prints out all outputs from all files in the directory
terraform output variable-name - prints just for this variable-name

===============
TERRAFORM STATE 
===============

terraform.tfstate (after ls in location)
- appears after apply command 
- it has record of a complete Infrastructure of terraform

terraform state - command 

terraform is a source of truth. It contains sensitive information

Do not manualy edit this file.

==================
Terraform Commands
==================

terraform validate - shows if the syntax is correct

terraform fmt - (format) command -> scans the files and formats them into canonical format
- improves readability 

terraform show - displays the current space of the resource

terraform providers - shows all providers used

terraform refresh - updates the state file. Modifies the state file

terraform graph - renders dependencies between Resources
- in DOT format, if run in software e.g. graphviz that generates graph

































===================================================================
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
===================================================================
















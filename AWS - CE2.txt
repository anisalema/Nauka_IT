AWS 
=============================
Creating IAM Users and Groups
=============================
1. Open IAM on AWS
2. Open User Group
3. Create Group
4. Attach permissions policies
    - for admins: AministratorAccess
5. Create Group
6. Open User
7. Create User
    - Clicking "Provide user access to the AWS Managment Console"
    means that you'll be able to log into the Managment Console
        - Click I want to create an IAM user
        - Click Custom password
        - Unclick "User must create password at next sign-in"
    - Click next
8. Add user to group (previously made)
9. Create User
10. Copy Cobsole sign-in URL (easier log in)

===================
Switching IAM Roles
===================
1. Open IAM 
2. Create User (like said previously) but don't add any permissions
3. (Open IAM) Click on Roles
4. Create a Role
5. Check AWS account option and This account option
6. Search for the permission you need
7. Click on the Role
Copy the link to switching roles in Console
8. Go to the user profile where u want to switch the role
9. Top right corner click on account
10a. Click switch roles (manuall option)
10b. Paste the link (auto option)
- If it doesn't work nothing will happen
XX. If user created without any permissions:
1x. Copy:
{
    "Version": "2012-10-17",
    "Statement": {
        "Effect": "Allow",
        "Action": "sts:AssumeRole",
        "Resource": "arn:aws:iam:account-id:role/Test*"
    }
}
2x. Go to the Roles -> open wanted role -> copy ARN
3x. Paste it in the code above where it says "Resource"
4x. Copy code
5x. Open Users -> go to the user -> click permissions
-> click add permissions -> create inline policy -> choose JSON
-> delete all code -> paste your code -> create policy
6x. Try again

===================
IAM Identity Center
===================

COME BACK AND CREATE NOTES

==================================
Amazon Elastic Compute Cloud (EC2)
==================================

EC2 hosts are managed by AWS.
EC2 Host Server consists of many EC2 Instances
An EC2 instance is a virtual server 
A selection of instance types come with varying combinations
of CPU, memory, storage and networking
EC2 instances run Windows, Linux or MacOS

Public IP address:
- Lost when the instance is stopped
- Used in Public Subnets
- No charge
- Associated with a private IP address on the instance
- Cannot be moved between instances
Private IP address:
- Retained when the instance is stopped
- Used in Public and Private Subnets 
Elastic IP address:
- Static Public IP address
- You are in charge if not used 
- Associated with a private IP address on the instance 
- Can be moved between insctances and Elastic Network Adapters

==============================
Launching Amazon EC2 Instances
==============================

1. Selecting Instance Type (defines the hardware profile and cost)
- t2.micro
    - Gerneral purpose
    - vCPUs 1
    - Memory (GiB) 1
- c5n.large
    - Compute optimized
    - vCPUs 2
    - Memory (GiB) 5.25
- r5ad.large
    - Memory optimized
    - vCPUs 2
    - Memory (GiB) 16
- d2.xlarge
    - Storage optimized
    - vCPUs 4
    - Memory (GiB) 30.5
- g2.2.xlarge
    - GPU insctances
    - vCPUs 8
    - Memory (GiB) 15

2. Choosing Amazon Machine Image - AMI (defines configuration of the instance)
    /EBS Snapshot - Backup of the EC2 Instance
    
= = = = = = = = = 
1. Open EC2
2. Click Launch instance
3. Name instance
4. Choose AMI
5. Choose Instance Type
6. Choose or Create KeyPair (RSA and .pem)
7. Create Security Group (type ssh)
8. Launch instance
If Windows 
    9. Open Security Group
    10. Edit Inboud Rules
    11. Add rule (Type - RDP) (Source - AnywhereIPv4)
    12. Save

=======================
Conecting to Amazon EC2
=======================
For Linux:
1. Open Instances
2. Click Connect
3. Choose EX2 Instance Connect (or SSH Client ale to z aplikacji na Windows)
4. Click Connect

For Windows
1. Open Instances
2. Click Connect
3. Choose RDP Client
5. Copy Public DNS Name
6. Get password (by Uploading Key File)
7. Decrypt password
8. In RDP Client (name of the RDP as server name; then login is username and password that we decrypted)


==================================
Access Keys and IAM Roles with EC2
==================================
EC2 Instance has an access key. AWS CLI configured with access keys.
The access keys is associated with an IAM account
The access keys will use the permissions assigned to the IAM user
We can always deactivate access keys and delete them.

Whatever commands we run it will be based on what permissions user has - NOT SECURED
Setting up and cofiguring IAM roles - SAFER
    - No credentials on IAM Roles
    - IAM utilizes STS (Security Token)
    
    FIRST WAY (Not secured)

1. Connect to the instance
2. Open IAM -> User -> Choose acoount -> Secutiry credentials -> Access Keys -> Create access key
3. Choose Command Line Interface (CLI)
4. Create an access key
5. Secret access key will be able to retieve only while you create one 
6. In the console:
    - aws configure
    - Paste Access Key
    - Paste Secret Access Key
    - Region: for example: us-east-1
7. aws s3 ls (run this command) - if nothing happens (or bucket shows) good 

8. cd ~/.aws
9. ls
10. cat config
11. cat credentials
12. cd ..
13. pwd (should be in user directory)
14. rm -rf ~/.aws/*

    SECOND WAY (Secured)

1. Role -> Create Role
2. Choose AWS service
3. Use case: EC2
4. Provide S3ReadOnlyAccess (and name the role S3ReadOnly)
5. Go back to EC2
6. Select instance
7. Actions -> Security -> Modify IAM Role
8. Choose S3ReadOnly
9. Update IAM Role
10. aws s3 ls (run this command) - if nothing happens (or bucket shows) good 

===============================
Create a Webstie with User Data
===============================

User data illows to insall lines of code that will be executed in a form of a script 
The code is run when the instance starts for the first time (only)
User data is limited to 16KB

#!/bin/bash
yum update -y
yum insall -y httpd
systemctl start httpd
systemctl enable httpd

This code above launches EC2 Instance with a web service
Batch and Powershell scripts can be run on Windows:

#!/bin/bash

# Update the system and install necessary packages
yum update -y
yum install -y httpd

# Start the Apache server
systemctl start httpd
systemctl enable httpd

# Fetch the Availability Zone information using IMDSv2
TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
AZ=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/availability-zone`

# Create the index.html file
cat > /var/www/html/index.html <<EOF
<html>
<head>
    <title>Instance Availability Zone</title>
    <style>
        body {
            background-color: #6495ED; /* Cornflower Blue - a darker shade */
            color: white;
            font-size: 36px; /* Significantly larger text */
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: Arial, sans-serif;
        }
    </style>
</head>
<body>
    <div>This instance is located in Availability Zone: $AZ</div>
</body>
</html>
EOF

# Ensure the httpd service is correctly set up to start on boot
chkconfig httpd on

HOW TO:
1. Go to EC2
2. Launch an instance
3. Name Whatever
4. Use Amazon Linux AMI
5. Choose t2.micrio Insance type
6. Proceed without KeyPair
7. Select existing security group (WebAccess)
8. Advanced Details
9. At the bottom paste the code above (user data)
10. Launch instance
11. Go to instance -> security group -> click the secutiry group
12. Go to inbound rules and edit them
13. Add rule 
14: Type: HTTP Source: AnywhereIPv4 and Save
15. To check: copy Public IPv4 address of an instance and paste in browser
16. Should say This Instance is located in some availability zone

=======================
Amazon EC2 Auto Scaling
=======================
Automatically launches and terminates instances
Maintain availability and scale capacity
Works with EC2, ECS and EKS
Itegrates with many AWS services, including
    - CloudWatch for monitoring and Scaling
    - Elastic Load Balancing for distribiuting connections
    - EC2 Spot Instances for cost optimization
    - Amazon VPC for deploying instances acorss AZs

1. Automatic scaling - Instances send metric to Amazon CloudWatch
If the metrics reports CPU > 80% CloudWatch notifies Auto Scaling
Auto Scaling launches an extra instance

2. Maintaining availability
EC2 Status Checks fail so ASG replaces failed instance

With Auto Scaling the scaling is horizontal (scales out) - adds or terminates instances
Provides elasticity and scalability (scale out and scale back in)
Responds to EC2 status checks and CloudWatch metrics
Can scale based on demand (performance) or on a schedule
Scaling policies define how ti respond to changes in demand

Configuration of an Auto Scaling Group:
A Launch Template specifies EC2 instance configuration
There is an older version called Launch Cofigurations are replaced by naunch tamplates and have fewer features
Lunch Template inclueds:
    - AMI and instance type 
    - EBS volumes
    - Security groups 
    - Key Pair
    - IAM instance profile
    - User data
    - Shutdown behaviour
    - Termination protection
    - Placement group name
    - Capacity reservation
    - Tenancy
    - Purchasing option (e.g. Spot)

Configure purchase options - On-demand vs Spot
Configure VPC and Subnets
Attach Load Balancer
Configure Health checks EC2 & ELB
Group size and scaling policies

Health checks
    - EC2 = EC2 status checks
    - ELB = Uses the ELB health checks in addtion to EC2 status checks
Health chech grace period
    - how long to wait before checking the health status og the instance
    - Auto Scaling does not act on health checks until grace period expires

Types of Auto Scaling:
- Manual - make changes to ASG size manually
- Dynamic - automatically scales based on demand
- Predictive - uses Machine Learning to Predict
- scheduled - scales based on schedule 

~~~~~~~~    ~~~~~~~~    ~~~~~~~
Creating The Auto Scaling Group
~~~~~~~~    ~~~~~~~~    ~~~~~~~

1. Copy the code (longer one) from before that creates Web Page 
2. Go to EC2 Dashboard
3. Go to Launch Tamplate
4. Create Launch Tamplate
    - AMI: Amazon Linux 2023.AMI
    - Instance Type: t2.micro
    - Don't include KeyPair
    - Security groups: Web Access
5. Go to Advanced Settings and paste in the User Data
6. Create Launch Tamplate
8. Go back to EC2
9. Go to Auto Scaling Groups
10. Create Auto Scaling Group with created Launch Tamplate
11. In the availability zones (2 usa ones)
12. Set group size to 2 (desired capacity) 
13. Set min desired scaling to 2 and max to 2 (in this example)
14. Create an Auto Scaling Group (if some setting is not mentioned than don't change)

When we go to EX2 > Auto Scaling groups > "Created group name"
we can set Dynamic and predictive scaling policies as well as scheduled Actions

=============================
Amazon Elastic Load Balancing
=============================
Provides high availability and fault tolerance
Targets include:
    - Amazon EC2 instances
    - Amazon EC2 containers
    - IP addresses
    - Lambda functions
    - Other load balancers

Performs Health Checks

~~~~~~~~~~~~
Application Load Balancer
- Operates at the request level
- Routes based on the content of the request (L7)
- Supports path-based routing, host-based routing, query string parameter-based routing, and source IP address-based routing
- Supports instances, IP addresses, Lambda d=functions and conteiners as Targets

Internet Client
--Load Balancer Protocol: HTTP, HTTPS-->
Application Load Balancer
--> Instance Protocol: HTTP, HTTPS-->
Instances

~~~~~~~~~~~~
Network Load Balancer
- Operates at the connection level
- Routes connections based on IP protocol data (L4)
- Offers ultra hugh performance, low latency and TLS offloading at scale
- Can have a statis IP / Elastic IP
- Supports UDP and static IP addresses as targets 
- Extreamly high performence / low balancer

Internet Client
--Load Balancer Protocol: TCP, TLS, UDP, TCP_UDP-->
Network Load Balancer
--> Instance Protocol: TCP, TCP_UDP-->
Instances

~~~~~~~~~~~~
Gateway Load Balancer
- Used in front of the virtual appliances such as firewalls, IDS/IPS, and deep packet inspection system
- Operates at Layer 3 - listens for all packets on all ports
- Forwards traffic to the TG soecified in the listener rules
- Exchanges traffic with appliances using the GENEVE protocol on port 6081

VPC Endpoint
--Load Balancer Protocol: All packets on all ports-->
Gateway Load Balancer
--Appliance Protocol: GENEVE-->
Virtual Appliance

~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~
ELB Use Cases:
Application Load Balancer
- Web applications with L7 routing (HTTP/HTTPS)
- Microservices architectures (e.g. Docker containers)
- Lambda targets 
Network Load Balancer:
- TCP and UDP based applications
- Ultra-low latency
- Statis IP addresses
- VPC endpoint services
Gateway Load Balancer
- Deploy, scale and manage 3rd party virtual network appliances 
- Centralized inspection and monitoring
- Firewalls, intrusion, detection and prevention system, and deep packet inspection systems

==================================
Creating Application Load Balancer
==================================
1. Open EC2
2. Go to Target Groups 
3. Create Target Group
    - Target Type: Instances (in this scenario)
    - ProtocolL HTTP (in this scenario)
    - Register Targets: If we choose an instance we are staticlly defining the instances
        if we don't it will happen automatically
2. Go to Load Balancer
3. Create Load Balancer:
    - Choose Application Load Balancer
    - Mappings: choose the ones where your instances are deployed
    - Security groups: Web Access
    - listeners and routing: listener HTTP:80 froward to created Target Type

To connect a Load Balancer to an Auto Scaling Group:
1. Go ro Auto Scaling groups
2. Select the group 
3. Scroll down the page and edit Load Balancing
4. Select target groups
5. Update

=======================
Create a Scaling Policy
=======================

Have Instances, Load Balane Group, Auto Scaling Group

No point in creating Auto Scaling Group if Desired, Min and Max are all the same.

1. Adjust 
In Auto Scaling Groups the number of Availability Zones and subnets (in Network) same as max
In Load Balancer -> Network mapping -> Edit subnets -> connections same as in scaling groups
2. Go Auto Scaling Groups
3. Go Automatic Scaling
4. Create a dynamic scaling policy
5. Change Metric type (in this case) to: Application Load Balancer
6. Go to CloudWatch ->  Alarms -> All Alarms

How to check:
1. Go to Load Balancer
2. Copy the DNS Name
3. Command to generate load on the ALB
replace with your alb dns name: (has to have http)
for i in {1..200}; do curl http://your-alb-address.com & done; wait
4. Open CloudShell
5. Paste the loop
6. Run it a few times 

=============
The OSI Model
=============
OSI Model (Open System Interconnection Model)

Layers (in depth)
4) Transport Layer (TCP [Transmission Control Protocol] - Connection Oriented Protocol -> three-way handshake 
[SYN - syncronize your sequence from PC to Web Server, then SYN-ACK - Sync Acknowledgement from Web Server to PC, 
then another ACK from PC to Web Server], UDP (User Data Protocol) from PC to Web Service but no tracking))
3) Network Layer (IP address; IP address = layer free; routes connections)
2) Data Link Layer (Address from PS connects through Ethernet protocol to Web Server Address)
1) Physical Layer (NIC, Ports, Cables, Equipment)

Layers (all 7):
7) Application Layer - Data - HTTP, FTP, SSH, DNS - Network Sercices to end user applications
6) Presentation Layer - Data - SSL, FTP, SSH, HTML - Data represantation and encryption
5) Session Layer - Data - TCP, RCP - Interhost communication
4) Transport Layer - Segments - TCP, UDP , TLS - End-to-end connections and reliability
3) Network Layer - Packets - IP, IPSec, ICMP (Internet Control Message Protocol) - Path determination (e.g. routing)
2) Data Link Layer - Frames - Ethernet, 802.11 - Physical addressing (e.g. MAC abd LLC)
1) Physical Layer - Bits - Coax, Fiber, Wireless - Media, signal, binary transmission

How to remember (All People Seem To Need Data Processing)

============================
Routers, Switches, Firewalls
============================


